# This workflow will build a CatalogAPI project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CatalogAPI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3   # checkout main repo branch
    
      # install 3.1 runtime on runner
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    #install .NET 6 on runner
    - name: Setup .NET 6 
      uses: actions/setup-dotnet@v3
      with:
       dotnet-version: 6.0.x
    
    # restoring the dependencies of KamilCatalog API project.
    - name: Restore dependencies
      run: dotnet restore "KamilCataLogAPI/KamilCataLogAPI.csproj"  # restore catalog api project
    
    # building the project
    - name: Build
      run: dotnet build "KamilCataLogAPI/KamilCataLogAPI.csproj" --no-restore  # build catalog api project
    
    # running testing project.
    - name: Test
      run: dotnet test "Test.CatalogAPI/Test.CatalogAPI.csproj"   --no-build  --verbosity normal --collect:"XPlat Code Coverage" -logger trx --results-directory coverage
    
   # copy code coverage to desired path
    - name: Copy Coverage to Predictable Location
      run: cp coverage/*/coverage.cobertura.xml coverage/coverage.cobertura.xml
   
   # coverage summary report
    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/coverage.cobertura.xml
        badge: true
        format: 'markdown'
        output: 'both'
        
     # add code coverage report to build summary
    - name: Write Code coverage to  Build Job Summary
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
    
    # export code coverage report
    - name: Create code coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Agent.WorkFolder)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:'Cobertura'
    
    # publish the project inside runner
    - name: Publish
      run: dotnet publish KamilCataLogAPI/KamilCataLogAPI.csproj -c Release -o publish/kamilcatalogapi   # publishes build artifact into publish/kamilcatalogapi folder on hosted runner
    
    # upload a build artifact to folder inside runner
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: artifact
    # A file, directory or wildcard pattern that describes what to upload
        path: publish/kamilcatalogapi
    # The desired behavior if no files are found using the provided path.
        #Available Options:
         # warn: Output a warning but do not fail the action
          #error: Fail the action with an error message
          #ignore: Do not output any warnings or errors, the action does not fail

        if-no-files-found: error
    # Duration after which artifact will expire in days. 0 means using default retention.
    # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

        retention-days:  0
